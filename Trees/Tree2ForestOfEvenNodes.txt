#include <iostream>
#include<bits/stdc++.h>
#define N 12
using namespace std;
/*

Idea is to find even number of nodes of subtree and to remove it from tree to form forest
Question here is just to find the maximum number of edges to remove to form
a forest of even nodes. 
There are 2n nodes in the Tree. So we find subtree of even nodes and count it, since 
removing 2n - 2x is even. n>x


*/
int dfs(vector<int> tree[N], int visit[N], int* ans, int node){
    int num = 0;
    visit[node] = 1;
    for(int i = 0; i < tree[node].size(); i++){
        if(visit[tree[node][i]] == 0){
            int temp = dfs(tree, visit, ans, tree[node][i]);
            
            (temp%2)?(num += temp):((*ans)++);
        }
    }
    return num + 1;
}

int minEdge(vector<int> tree[N], int n){
    int visited[n+1],ans = 0;
    memset(visited, 0, sizeof(visited));
    
    dfs(tree, visited, &ans, 1);
    
    return ans;
}

int main() 
{ 
    int n = 10; 
    vector<int> tree[n+2]; 
    tree[1].push_back(3); 
    tree[3].push_back(1); 
  
    tree[1].push_back(6); 
    tree[6].push_back(1); 
  
    tree[1].push_back(2); 
    tree[2].push_back(1); 
  
    tree[3].push_back(4); 
    tree[4].push_back(3); 
  
    tree[6].push_back(8); 
    tree[8].push_back(6); 
  
    tree[2].push_back(7); 
    tree[7].push_back(2); 
  
    tree[2].push_back(5); 
    tree[5].push_back(2); 
  
    tree[4].push_back(9); 
    tree[9].push_back(4); 
  
    tree[4].push_back(10); 
    tree[10].push_back(4); 
  
    cout << minEdge(tree, n) << endl; 
    return 0; 
} 
