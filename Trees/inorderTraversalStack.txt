/*
Inorder traversal using stack

Inorder: Left,Root,Right

Here we create a stack datastructure in which we place each node and emulate inorder 
tree behaviour.

1.Initialize current node to root
2.while current!=NULL and stack is not empty repeat 
3.place all left child of current into stack until it is none
4.current=top element of stack which would be leftmost element and print
5.pop top element   
6.current=current->right and repeat from step 3




*/

#include <iostream>
#include<bits/stdc++.h>


using namespace std;
struct node{
    int data;
    struct node* left;
    struct node* right;
    node(int data){
        this->data=data;
        left=right=NULL;
    }
};

void inorder(struct node* root){
    stack <node*> s;
    node* current=root;
    while(current!=NULL||s.empty()==false){
        
    while(current!=NULL){    //to push left child of parent
        s.push(current);
        current=current->left;
    }
          //print the current node data
    current=s.top();
    cout<<current->data<<" "; 
    s.pop();
    current=current->right;
    }
    
}
int main()
{
    struct node* root=new node(1);
    root->left=new node(2);                 //Initialize our tree
    root->right=new node(3);
    root->left->left=new node(4);
    root->left->right=new node(5);
    root->right->left=new node(6);
    root->right->right=new node(7);
    inorder(root);
    
    return 0;
}
