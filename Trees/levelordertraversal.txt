/*
Level order traversal is also known as breadth first traversal
Here we traverse the tree in a breadth wise fashion ,
starting from root till the last row of the tree



*/
#include<iostream>
using namespace std;


typedef struct Node{
int data;
struct Node* left;
struct Node* right;
Node(int data){
this->data=data;                  
left=right=NULL;
}
};

int findheight(Node* node){
    if(node==NULL){
        return 0;
    }
    int lheight=findheight(node->left);
    int rheight=findheight(node->right);      //returns height of the tree
    if(lheight>rheight){                      //recursive call is made and such that
        return 1+lheight;                     // max(lheight,rheight) is found for root node
    }
    else{
        return 1+rheight;
    }
}

void levelvalue(Node* node,int val){
    if(node==NULL){
        return;
    }
    if(val==1){
        cout<<node->data<<" ";              //This is where core logic lies
    }                                       //level order is passed here and here when  
    levelvalue(node->left,val-1);           //level reaches the correct value,it gets displayed.
    levelvalue(node->right,val-1);
    
    
}
void levelOrder(Node* node)
{
  //Your code here
  int height=findheight(node);        //Here call is made for levelview 
  for(int i=1;i<=height;i++){         //pertaining to each level starting from 1
      levelvalue(node,i);
  }
}


int main()
{
    struct node* root=new node(1);
    root->left=new node(2);                 //Initialize our tree
    root->right=new node(3);
    root->left->left=new node(4);
    root->left->right=new node(5);
    root->right->left=new node(6);
    root->right->right=new node(7);
    levelOrder(root);
    
    return 0;
}



