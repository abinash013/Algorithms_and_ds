#include <iostream>
#include<bits/stdc++.h>
using namespace std;

struct Node{
    char data;
    vector<Node*> child;
};

Node* newNode(char data){
    Node* nnode = new Node;
    nnode->data = data;
    return nnode;
}
int depthoftree(Node* root){
    if(root == NULL){
        return 0;
    }
    int depth = 0;
    for(auto it = root->child.begin(); it != root->child.end(); it++){
        depth = max(depth, depthoftree(*it));
    }
    return 1 +depth;
}

int main() {
	Node *root = newNode('A'); 
   (root->child).push_back(newNode('B')); 
   (root->child).push_back(newNode('F')); 
   (root->child).push_back(newNode('D')); 
   (root->child).push_back(newNode('E')); 
   (root->child[0]->child).push_back(newNode('K')); 
   (root->child[0]->child).push_back(newNode('J')); 
   (root->child[2]->child).push_back(newNode('G')); 
   (root->child[3]->child).push_back(newNode('C')); 
   (root->child[3]->child).push_back(newNode('H')); 
   (root->child[3]->child).push_back(newNode('I')); 
   (root->child[0]->child[0]->child).push_back(newNode('N')); 
   (root->child[0]->child[0]->child).push_back(newNode('M')); 
   (root->child[3]->child[2]->child).push_back(newNode('L')); 
   cout<<depthoftree(root);
	return 0;
}