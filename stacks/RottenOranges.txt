#include <iostream>
#include<bits/stdc++.h>
#include<utility>
using namespace std;
/*
GFG
Given a matrix of dimension r*c where each cell in the matrix can have values 0, 1 or 2 which has the following meaning:
0 : Empty cell
1 : Cells have fresh oranges
2 : Cells have rotten oranges

So, we have to determine what is the minimum time required to rot all oranges. A rotten orange at index [i,j] can rot other fresh orange at indexes [i-1,j], [i+1,j], [i,j-1], [i,j+1] (up, down, left and right) in unit time. If it is impossible to rot every orange then simply return -1.

Example:
Input:
2
3 5
2 1 0 2 1 1 0 1 2 1 1 0 0 2 1
3 5
2 1 0 2 1 0 0 1 2 1 1 0 0 2 1

Output:
2
-1




*/
bool is_inside(int r,int c,int x,int y){
    return (x<r&&x>=0&&y>=0&&y<c);
}
int main() {
	int t;
	cin>>t;
	while(t--){
	    
	    int r,c;
	    cin>>r>>c;
	    int ar[r][c],total=0;
	    queue<pair<int,int>> q;
	    for(int i=0;i<r;i++){
	        for(int j=0;j<c;j++){
	            cin>>ar[i][j];
	            if(ar[i][j]==1||ar[i][j]==2){
	                ++total;
	            }
	            if(ar[i][j]==2){
	                q.push(make_pair(i,j));
	            }
	        }
	    }
	    int iter=0;
	    int count=0;
	    int s,x,y;
	    while(!q.empty()){
	        int s=q.size();
	        count+=q.size();
	        while(s--){
	            pair<int,int> temp=q.front();
	            q.pop();
	            x=temp.first;
	            y=temp.second;
	            if(is_inside(r,c,x+1,y)&&ar[x+1][y]==1){
	                ar[x+1][y]=2;
	                q.push(make_pair(x+1,y));
	            }
	            if(is_inside(r,c,x-1,y)&&ar[x-1][y]==1){
	                ar[x-1][y]=2;
	                 q.push(make_pair(x-1,y));
	            }
	            if(is_inside(r,c,x,y+1)&&ar[x][y+1]==1){
	                ar[x][y+1]=2;
	                 q.push(make_pair(x,y+1));
	            }
	            if(is_inside(r,c,x,y-1)&&ar[x][y-1]==1){
	                ar[x][y-1]=2;
	                 q.push(make_pair(x,y-1));
	            }
	            
	            
	        }
	        ++iter;
	        
	        
	    }
	    if(count==total){
	        cout<<iter-1<<endl;
	    }
	    else{
	        cout<<"-1"<<endl;
	    }
   
	    
	}
	return 0;
}