#include <iostream>
#include<cstring>
using namespace std;
/*

Given a string, find the length of the longest substring without repeating characters. For example, the longest substrings without repeating characters for “ABDEFGABEF” are “BDEFGA” and “DEFGAB”, with length 6.




*/
int main() {
	int t;
	cin>>t;
	while(t--){
	    string s;
	    cin>>s;
	    int dp[26],curlen=0,maxx=0,i=0;
	    int size=s.length();
	    memset(dp,-1,sizeof(dp));           //initializing array dp to 1
	    while(i<size){
	        if(dp[s[i]-'a']!=-1){             //check if the char has visited already in the current substring
	            curlen=0;                     //If yes, then set curlen to zero and then index the index of that prev occured char index + 1
	            i=dp[s[i]-'a']+1;          
	            memset(dp,-1,sizeof(dp));       //Now set the whole dp to -1
	        }
	        else{
	            curlen++;
	            dp[s[i]-'a']=i;                //If the char is not visited yet, then inc curlen,set current index to dp such that it can be used to set as starting index when same char is repeated
	            maxx=max(curlen,maxx);
	            ++i;                           //Inc index
	            
	        }
	        
	    }
	    cout<<maxx<<endl;
	    
	    
	    
	}
	return 0;
}