#include <bits/stdc++.h>

using namespace std;


/*

You are given an unordered array consisting of consecutive integers  [1, 2, 3, ..., n] without any duplicates. You are allowed to swap any two elements. You need to find the minimum number of swaps required to sort the array in ascending order.
Complete the function minimumSwaps in the editor below. It must return an integer representing the minimum number of swaps to sort the array.


Whenever there exists any loop, the total number of swaps required to sort them
in ascending order in side - 1

Therefore here a boolean array is created which is init to false for all indices
PSEUDO CODE:

for i<-0 to n do:
	if arr[i] visited or in right place:
		continue
        temp<-arr[i] - 1   //since 0 indexed
 	c<-0
        while(arr[t] not visited):
		arr[t] is visited
		t<- arr[t] - 1
		c++
         if(c > 0):
		count += c -1  //as mentioned above
 return count




*/
vector<string> split_string(string);
// Complete the minimumSwaps function below.
int minimumSwaps(vector<int> arr) {
      int count = 0,t, c = 0,n =arr.size();
      bool visited[arr.size()] = { false };
      for( int i = 0; i < n; i++){
             
                if( visited[i] || arr[i] == i+1){
                    continue;
                }
                c = 0;
                t = arr[i] - 1;
                while( !visited[t] ){
                    c++;
                    visited[t] = true;
                    t = arr[t] - 1;
                }
                if( c > 0){
                    count += c - 1;
                }






      }
      return count;

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int n;
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    string arr_temp_temp;
    getline(cin, arr_temp_temp);

    vector<string> arr_temp = split_string(arr_temp_temp);

    vector<int> arr(n);

    for (int i = 0; i < n; i++) {
        int arr_item = stoi(arr_temp[i]);

        arr[i] = arr_item;
    }

    int res = minimumSwaps(arr);

    fout << res << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
