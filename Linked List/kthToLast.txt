#include<iostream>
using namespace std;
class Node{
    public:
    int data;
    Node* next;
    Node(int data){
    
        this->data=data;
        this->next=NULL;
    }
};
/*
recursive call is made to reach end of the linked list
Then k is decremented which is passed by reference hence data is maintained through stacks
when k equals zero it points to the exact kth node from the end
which is then returned.



*/
Node* kthnode(Node* head,int &k){
    if(head==NULL||k==0){
        return NULL;
    }
    Node* nd=kthnode(head->next,k);
    --k;
    if(k==0){
        return head;
    }
    return nd;
}
void insert(Node *head,int data){
    Node *nd=new Node(data);
    Node *temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=nd;
}
int main(){
    Node *head=new Node(10);
    insert(head,20);
    insert(head,30);
    insert(head,40);
    int i=3;
    Node *nd=kthnode(head,i);
    if(nd!=NULL){
    cout<<nd->data;
    }
    
    
    
    
    
}