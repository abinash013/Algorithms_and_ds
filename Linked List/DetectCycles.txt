#include<iostream>
using namespace std;
class Node{
    public:
    int data;
    Node* next;
    Node(int data){
    
        this->data=data;
        this->next=NULL;
    }
};
void insert(Node *head,int data){
    Node *nd=new Node(data);
    Node *temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=nd;
}

int loopdata(Node* head){
    
    Node* fast=head,*slow=head;    
    do{
        fast=fast->next->next;
        slow=slow->next;
    }while(fast!=slow);
    
    slow=head;
    while(fast!=slow){
        fast=fast->next;
        slow=slow->next;
    }
    return fast->data;
    
    
}
/*

The problem is detect loop in a linked list which means there is no tail or the tail
points to any node in between head and tail which means there exist no tail and there 
is infinite traversal from head

The solution is to detect the collision point or in other words where the tail points to 
the node before it.

To find it we make use of two pointers runner[2x] and slow pointer which initially points
to head. We know that the runner runs 2x more steps compared to slow and hence when
the runner reaches the tail of any linked list the slow is will be exactly at the middle
of the linked list.

Here when the slow pointer is at the collision node after k steps , the runner would have
travelled 2k steps. In other words k steps ahead of slow pointer.

In other words runner is LOOP_SIZE-K ,   K=(k mod LOOP_SIZE) because k might be larger than loop size steps behind slow. The runner 
is behind slow by k steps (LOOP_SIZE -k +k =0).

So now slow is initialized to head.
runner is now incremented one step per loop
 Now both runner and slow and k steps behind collision point which
is the loop detection point. When both slow and runner meets, that point is the collision detection point.



*/

int main(){
    Node *head=new Node(10);
    insert(head,20);
    insert(head,30);
    insert(head,40);
    insert(head,50);
    insert(head,60);
    insert(head,70);
    insert(head,80);
    Node *temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
    }
    Node* t=head->next->next;
    temp->next=t;
    cout<<loopdata(head);
    
}